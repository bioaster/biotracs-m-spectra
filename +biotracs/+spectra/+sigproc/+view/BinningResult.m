% BIOASTER
%> @file		BinningResult.m
%> @class		biotracs.spectra.sigproc.view.BinningResult
%> @link		http://www.bioaster.org
%> @copyright	Copyright (c) 2014, Bioaster Technology Research Institute (http://www.bioaster.org)
%> @license		BIOASTER
%> @date        2017

classdef BinningResult < biotracs.core.mvc.view.ResourceSet
    
    properties(SetAccess = protected)
    end
    
    % -------------------------------------------------------
    % Public methods
    % -------------------------------------------------------
    
    methods

        
        function h = viewPlot( this, varargin )
            p = inputParser();
            p.addParameter('SignalIndexes', [], @isnumeric);
            p.KeepUnmatched = true;
            p.parse( varargin{:} ); 
            model = this.getModel();
            e = model.getProcess();
            originalSignalSet = e.getInputPortData('SignalSet');
            binnedContinuousSignalSet = model.get('ContinuousBinnedSignals');
            binnedDiscreteSignalSet = model.get('DiscreteBinnedSignals');
            indexes = p.Results.SignalIndexes;
            
            if isempty( indexes )
                h = originalSignalSet.view('Plot', varargin{:});
                binnedContinuousSignalSet.view(...
                    'Plot', ...
                    'NewFigure', false, ...
                    'LineStyle', '-', ...
					'Color', 'r', ...
                    'Title', 'Binned signal'...
                    );            
                binnedDiscreteSignalSet.view(...
                    'Plot', ...
                    'NewFigure', false, ...
                    'LineStyle', 'none', ...
                    'Marker', 'o', ...
                    'MarkerSize', 2, ...
                    'MarkerFaceColor', 'r', ...
                    'Color', 'r' ...
                    );
                
                if isa(originalSignalSet, 'biotracs.spectra.data.model.Signal')
                    stats = model.get('Statistics');
                    legend( sprintf('r = %1.2f (p = %1.2f)',stats.data(1),stats.data(2)) );
                end
            else
                n = length( indexes );
                h = cell(1,n);
                stats = model.get('Statistics');
                for i=1:n
                    idx = indexes(i);
                    h{i} = originalSignalSet.getAt(idx).view('Plot', varargin{:});
                    binnedContinuousSignalSet.getAt(idx).view(...
                        'Plot', ...
                        'NewFigure', false, ...
                        'LineStyle', '-', ...
						'Color', 'r', ...
                        'Title', 'Binned signal'...
                        );
                    binnedDiscreteSignalSet.getAt(idx).view(...
                        'Plot', ...
                        'NewFigure', false, ...
                        'LineStyle', 'none', ...
                        'Marker', 'o', ...
                        'MarkerSize', 3, ...
                        'MarkerFaceColor', 'r', ...
                        'Color', 'r' ...
                    );
                    legend( sprintf('r = %1.2f (p = %1.2f)',stats.data(i,1),stats.data(i,2)) );
                end
            end
        end
        
    end
    
end
